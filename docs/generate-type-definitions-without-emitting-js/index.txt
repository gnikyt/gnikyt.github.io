   #[1]gnikyt feed

   [2]gnikyt   /  Code ramblings

                Shopify Checkout Extension to backend fetching /

   /* Feb 27, 2024  —  3.1KB */
   [3]Logo of shopify [4]Logo of javascript [5]Logo of react

   There are several posts around about people having issues figuring out
   how to send a fetch request from their checkout extension to their app
   backend (Remix). Shopify’s documentation around this is rather limited
   as well. So, I have put together a small example of how you can achieve
   this!

   Assuming your extension was generated by the Shopify CLI, you should
   have a strucutre as such:
  extensions/
    [your-ext]/
      Checkout.tsx
      package.json
      tsconfig.json
      shopify.extension.toml
      README.md

   Create a new file in your extension directory called useSessionFetch.ts
   and paste the following contents:
// extensions/[your-ext]/useSessionFetch.ts

import type { SessionToken } from "@shopify/ui-extensions/checkout";

/**
 * Fetch using session token.
 *
 * @param sessionToken - Session token service.
 */
export default function useSessionFetch(sessionToken: SessionToken) {
  /*
   * Fetch resource.
   *
   * @param url - URL or request object for fetch.
   * @param init - Configuration for fetch.
   */
  return async function (url: string | URL | Request, init?: RequestInit) {
    const token = await sessionToken.get();
    return fetch(url, {
      ...(init || {}),
      headers: {
        ...(init && init.headers ? init.headers : {}),
        Authorization: `Bearer ${token}`,
      },
    });
  };
}

   This function will accept the session token service and return a
   function you can use instead of fetch. Upon calling it, the code will
   automatically get a session token to append to the fetch request’s
   headers. Its really just a small but helpful hook to wrap around fetch.

   To utilize this in your extension, example:
// extensions/[your-ext]/Checkout.tsx

import { useSessionToken } from "@shopify/ui-extensions-react/checkout";
import useSessionFetch from "./useSessionFetch";

function Extension() {
  const sessionToken = useSessionToken();
  const sessionFetch = useSessionFetch(sessionToken);

  useEffect(() => {
    (async () => {
      // Use `sessionFetch` instead of `fetch`
      const response = await sessionFetch("/some/path/to/remix/backend");
      if (response.ok) {
        const { data } = await response.json();
        setData(data);
      }}
    })();
  }, []);

  // ...
}

   On your backend:
// routes/some.path.to.remix.backend

import { authenticate } from "../shopify.server";
import { json, type LoaderFunctionArgs } from "@remix-run/node";

export async function loader({ request, params }: LoaderFunctionArgs) {
  const { sessionToken, cors } = await authenticate.public.checkout(request);
  const shop = ShopDomain(sessionToken.dest);

  // ...

  return cors(json({
    data: { hello: "world" },
  }));
}

   Now, with this hook, the token, and utilization of
   authenticate.public.checkout, you can easily make a fetch request from
   your extension to your backend.

   Appendix

   Copyright under [6]CC-4.0.

   Available in the following alternative formats:
   [7]MD  /  [8]TXT  /  [9]PDF

   [10]Ty King

[11]Ty King

   A self-taught, seasoned, and versatile developer from Newfoundland.
   Crafting innovative solutions with care and expertise.

   Crafting innovative solutions with care and expertise.

   [12]Github[13]LinkedIn[14]CV[15]RSS

     *
     *
     *
     *
     *
     *
     *
     *

References

   1. /rss.xml
   2. file:///
   3. file:///category/shopify
   4. file:///category/javascript
   5. file:///category/react
   6. https://creativecommons.org/licenses/by/4.0/
   7. file:///generate-type-definitions-without-emitting-js/index.md
   8. file:///generate-type-definitions-without-emitting-js/index.txt
   9. file:///tmp/lynxXXXXM92FxV/L178289-394TMP.html
  10. file:///about
  11. file:///about
  12. https://github.com/gnikyt
  13. https://linkedin.com/in/gnikyt
  14. file:///assets/files/cv.pdf
  15. file:///rss.xml

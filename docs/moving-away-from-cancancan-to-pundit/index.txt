   #[1]gnikyt feed

   [2]gnikyt Code ramblings.

                      Moving away from CanCanCan to Pundit

   /* Mar 30, 2017 — 4.5KB */

What is Pundit & CanCanCan

   [3]Pundit is a simple, platform-agnostic, plain-ol-Ruby authorization
   library. It provides a set of helpers to get authorization done simply
   no matter if its plain Ruby, Sinatra, or Rails.

   [4]CanCanCan is a fork of the original CanCan Gem for Rails. CanCanCan,
   like Pundit, is an authorization library. Its specifically designed for
   Rails and provides a set of baked-in helpers to authorize models and
   controllers within Rails.

Inner Workings

   Pundit relies on POROs… “Policy” classes. Each model can have a policy
   where you can define the methods accessible to the object attempting to
   access it (a user, a group, …). Each policy can have its own scope as
   well, for example, an “admin” scope can see all entries in the
   database, while a “manager” can only see published entries in the
   database.

class ArticlePolicy
  #...
  def create?
    # Only admins can create articles
    user.role? :admin
  end

  #...
  class Scope
    #...
    def resolve
      if user.role? :admin
        scope.all
      else
        scope.where(published: true)
      end
    end
  end
end

class ArticleController
  #...
  def index
    @articles = policy_scope(Article)
  end
  #...
end

#...

<%= link_to('Add Article', new_article_path) if policy(:article).create? %>

   So in the above example, we set up our simple policy. All policy
   methods return a boolean to determine if the object requesting access
   can perform the action. In the controller, we scope the articles using
   the scope defined in the policy. Then in the view, we can call the
   Article’s policy and check if the current user is able to create an
   article. Very clear logic.

   CanCanCan, in all my past experiences, relies on a single Ability class
   tied to the object we’re checking authorizations on. Its DSL is very
   simple and effective.

class Ability
  #...
  if user.role? :admin
    can :crud, :all
  elsif user.role? :manager
    can :read, Article, published: true
    can [:update, :edit], Article, user: { id: user.id }
    can :destory, Article
  end
  #...
end

#...

<%= link_to('Add Article', new_article_path) if can? :create, Article %>

   So in the above example, the user’s abilities will be defined by the
   class. Scoping can be handled here as well. In the view, we then check
   if the user is able to create an article.

Why I Switched

   I’m currently reviewing my own CMS’ pull request for moving to Pundit.
   [5]It is a long one… but worth it.

   CanCanCan is awesome. It provides quick boilerplate to bust out an
   authorization system that ties into Rails nicely. However, once you
   start getting into complex authorizations, it becomes cumbersome to
   manage.

   You start the need to do complex scoping which you then need to offload
   scoping logic into the model. You start to have many conflicting and
   confusing can and cannot statements. You start to have a growing
   ability file that has everything mushed together and it becomes hard to
   read. Controllers start to have a lot of authorization magic happen
   which sometimes needs to have an override.

   Eventually its a mess. Yes, you can spend time separating CanCanCan
   into more manageable pieces but then you look at Pundit, which does
   this already.

   With Pundit… everything has its own class, a simple PORO, and their own
   scopes… very easy to look up and see at a glance what is happening.
   Although with Pundit you are writing more explicitly in the
   controllers, it’s actually more beneficial because another person can
   easily read your controllers/views and know exactly what’s happening
   without “magic” that comes with CanCanCan.

   I simply switched because I felt Pundit is more manageable and a better
   long-term solution than CanCanCan. I now have more readable code, more
   maintainable code, and code that’s easily overridable by others.

When to use each

   Both libraries are great and both get the job done. In my opinion, if
   you need something quick and don’t have a lot of logic at play,
   CanCanCan will fit right in your flow. If you want more fine-grained
   control and separation, give Pundit a try!

   Either way, with both, you will not be disappointed. Both libraries are
   well documented, well written, and contribute greatly to the Ruby and
   Rails communities.

   [6]MD | [7]TXT | [8]CC-4.0

   This post is 7 years old and may contain outdated information.
     __________________________________________________________________

   [9]Ty King

Ty King

   A self-taught, seasoned, and versatile developer from Newfoundland.
   Crafting innovative solutions with care and expertise.
   [10]Github [11]About Me [12]CV [13]RSS
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *

References

   Visible links:
   1. /rss.xml
   2. /
   3. https://github.com/elabs/pundit
   4. https://github.com/CanCanCommunity/cancancan
   5. https://patch-diff.githubusercontent.com/raw/tyler-king/guts/pull/9.patch
   6. /moving-away-from-cancancan-to-pundit/index.md
   7. /moving-away-from-cancancan-to-pundit/index.txt
   8. https://creativecommons.org/licenses/by/4.0/
   9. /about
  10. https://github.com/gnikyt
  11. /about
  12. /assets/files/cv.pdf
  13. /rss.xml

   Hidden links:
  15. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-1
  16. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-2
  17. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-3
  18. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-4
  19. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-5
  20. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-6
  21. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-7
  22. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-8
  23. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-9
  24. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-10
  25. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-11
  26. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-12
  27. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-13
  28. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-14
  29. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-15
  30. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-16
  31. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-17
  32. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-18
  33. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-19
  34. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-20
  35. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-21
  36. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-22
  37. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-23
  38. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-24
  39. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-25
  40. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-26
  41. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-27
  42. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-28
  43. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-29
  44. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-30
  45. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb1-31
  46. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-1
  47. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-2
  48. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-3
  49. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-4
  50. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-5
  51. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-6
  52. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-7
  53. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-8
  54. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-9
  55. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-10
  56. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-11
  57. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-12
  58. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-13
  59. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-14
  60. localhost/tmp/lynxXXXXfcPucO/L381681-4387TMP.html#cb2-15

   #[1]gnikyt feed

   [2]gnikyt Code ramblings.

           Simple password checking with Symfony and FOS User Bundle

   /* Aug 28, 2013 — 4.1KB */

   Recently for a project, a co-developer wanted to validate someoneʼs
   record in the database from an Android application and the website was
   using Symfony 2.3 with FOS User Bundle. Specifically, this developer
   did not want to log the user in, only to check their login against the
   database. So this seemed like a special enough case to show my solution
   to the problem.

   We were going to tackle this by an HTTP POST request to /login_check,
   with the userʼs email and password. Now, FOS User Bundle is highly
   configurable. At first, I considered extending the authentication
   handler and tapping into onAuthenticationSuccess and
   onAuthenticationFailure. By extending the authentication handler, I
   could now check for an external request from the Android application,
   and provide a JSON response for the POST data - showing if it was a
   valid login or not.

   This provided a problem however, FOS User Bundle uses CSRF tokens on
   the login to prevent these kinds of HTTP requests, which is nice. But,
   to disable it so the Android application could externally call
   /login_check on the website, I would have to extend the security form
   controller for FOS User Bundle in SecurityController.php, and to do
   that you need to create a new bundle which is a child of FOSUserBundle.
   On top of that, then we have a security issue where we have no CSRF
   protection.

   Thatʼs a lot of work just to respond to a HTTP request and let the
   application know of the email and password match the database.

   So my solution was simple; take the userʼs email, validate it, then
   take the password and use Symfonyʼs encoder service to hash the
   password sent to the controller for that email and check if itʼs valid.

   Here is the controller code below. In my code, I added an
   "android_secret" parameter read from app/parameters.yml which is a hash
   that just ensures the request came from the Android application - this
   is unnecessary and can be removed if you please.
<?php

namespace Acme\WebsiteBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class AndroidController extends Controller
{
  public function checkLoginAction(Request $request)
  {
  // Get our POST data.
    $email    = $request->request->get(ʼemailʼ);
    $password = $request->request->get(ʼpasswordʼ);
    $secret   = $request->request->get(ʼsecretʼ);

  // Setup the JSON messages.
    $messages = [
      ʼsuccessʼ &ge; [
        ʼsuccessʼ &ge; true,
        ʼmessageʼ &ge; ʼVALID_LOGINʼ
      ],
      ʼfailʼ    &ge; [
        ʼsuccessʼ &ge; false,
        ʼmessageʼ &ge; ʼINVALID_LOGINʼ
      ],
      ʼsecretʼ  &ge; [
        ʼsuccessʼ &ge; false,
        ʼmessageʼ &ge; ʼINVALID_AUTHʼ
      ]
    ];

    $type           = ʼapplication/jsonʼ;
    $return_success = json_encode($messages[ʼsuccessʼ]);
    $return_fail    = json_encode($messages[ʼfailʼ]);
    $return_secret  = json_encode($messages[ʼsecretʼ]);

  // Ensure this is from the Android application.
    if ($this->container->getParameter(ʼandroid_secretʼ) !== $secret) {
      return new Response($return_secret, 200, [ʼContent-Typeʼ &ge; $type]);
    }

  // Check the email sent to us.
    $user = $this->get(ʼfos_user.user_managerʼ)->findUserByEmail($email);
    if (null === $user) {
      return new Response($return_fail, 200, [ʼContent-Typeʼ &ge; $type]);
    }

  // Email passed. Letʼs encode the password sent to us using the userʼs salt.
    $encoder      = $this->get(ʼsecurity.encoder_factoryʼ)->getEncoder($user);
    $encoded_pass = $encoder->encodePassword($password, $user->getSalt());

  // Check if the password sent to us matches encoded_pass we just created.
    if ($encoded_pass === $user->getPassword()) {
    // Passed!
      return new Response($return_success, 200, [ʼContent-Typeʼ &ge; $type]);
    }

  // Failed!
    return new Response($return_fail, 200, [ʼContent-Typeʼ &ge; $type]);
  }
}

   [3]MD | [4]TXT | [5]CC-4.0

   This post is 11 years old and may contain outdated information.
     __________________________________________________________________

   [6]Ty King

Ty King

   A self-taught, seasoned, and versatile developer from Newfoundland.
   Crafting innovative solutions with care and expertise.
   [7]Github [8]About Me [9]CV [10]RSS
     *
     *
     *
     *
     *
     *
     *
     *
     *

References

   1. /rss.xml
   2. /
   3. /simple-password-checking-with-symfony-and-fos-user-bundle/index.md
   4. /simple-password-checking-with-symfony-and-fos-user-bundle/index.txt
   5. https://creativecommons.org/licenses/by/4.0/
   6. /about
   7. https://github.com/gnikyt
   8. /about
   9. /assets/files/cv.pdf
  10. /rss.xml

   #[1]gnikyt feed

   [2]gnikyt Code ramblings.

                          Async Shopify API for Python

   /* Jun 29, 2020 — 3.9KB */

Introduction

   I maintain a fairly used [3]PHP library for Shopify API which uses
   Guzzle for sync/async requests. It was also recently featured as a
   recommended third-party library on Shopify’s dev docs.

   For Python, which I also use with Shopify work, I didn’t notice a
   library which provides async abilities. Normally I use Shopify’s Python
   library which provides a nice ActiveResource implementation. However,
   their library has no plans to support async.

   I decided to create a tested library that can do both,
   [4]basic_shopify_api. It is a loose port of my PHP version which
   supports sync, async, HMAC validation, rate limiting, automatic
   retries, REST, and GraphQL; all backed by the HTTPX package.

   You simply need to set up some basic options and create a session for a
   shop to get started.

Sync

  REST

from basic_shopify_api import Client

# ...

with Client(sess, opts) as client:
    shop = client.rest("get", "/admin/api/shop.json", {"fields": "name,email"})
    print(shop.response)
    print(shop.body["name"])

    # returns the following:
    # RestResult(
    #   response=The HTTPX response object,
    #   body=A dict of JSON response, or None if errors,
    #   errors=A dict of error response (if possible), or None for no errors, or
 the exception error,
    #   status=The HTTP status code,
    #   link=A RestLink object of next/previous pagination info,
    #   retries=Number of retires for the request
    # )

  GraphQL

from basic_shopify_api import Client

# ...

with Client(sess, opts) as client:
    shop = client.graphql("{ shop { name } }")
    print(shop.response)
    print(shop.body["data"]["shop"]["name"])

    # returns the following:
    # ApiResult(
    #   response=The HTTPX response object,
    #   body=A dict of JSON response, or None if errors,
    #   errors=A dict of error response (if possible), or None for no errors, or
 the exception error,
    #   status=The HTTP status code,
    #   retries=Number of retires for the request,
    # )

Async

  REST

from basic_shopify_api import AsyncClient

# ...

async with AsyncClient(sess, opts) as client:
    shop = await client.rest("get", "/admin/api/shop.json", {"fields": "name,ema
il"})
    print(shop.response)
    print(shop.body["name"])

    # returns the following:
    # RestResult(
    #   response=The HTTPX response object,
    #   body=A dict of JSON response, or None if errors,
    #   errors=A dict of error response (if possible), or None for no errors, or
 the exception error,
    #   status=The HTTP status code,
    #   link=A RestLink object of next/previous pagination info,
    #   retries=Number of retires for the request
    # )

  GraphQL

from basic_shopify_api import AsyncClient

# ...

async with AsyncClient(sess, opts) as client:
    shop = await client.graphql("{ shop { name } }")
    print(shop.response)
    print(shop.body["data"]["shop"]["name"])

    # returns the following:
    # ApiResult(
    #   response=The HTTPX response object,
    #   body=A dict of JSON response, or None if errors,
    #   errors=A dict of error response (if possible), or None for no errors, or
 the exception error,
    #   status=The HTTP status code,
    #   retries=Number of retires for the request,
    # )

Conclusion

   The above examples are brief, refer to the README of the project for
   full information. But I believe you will find it very helpful -
   especially the automatic retries for failed requests and built-in
   rate/cost limiting.

   Feel free to give it a try with your projects, with the continual rise
   of async within Python, I hope the library will serve some use to you.
   I’ve recently paired it with [5]FastAPI and it performed well.

   [6]MD | [7]TXT | [8]CC-4.0

   This post is 4 years old and may contain outdated information.
     __________________________________________________________________

   [9]Ty King

Ty King

   A self-taught, seasoned, and versatile developer from Newfoundland.
   Crafting innovative solutions with care and expertise.
   [10]Github [11]About Me [12]CV [13]RSS
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *

References

   Visible links:
   1. /rss.xml
   2. /
   3. https://github.com/gnikyt/Basic-Shopify-API
   4. https://github.com/gnikyt/basic_shopify_api
   5. https://fastapi.tiangolo.com/
   6. /async-shopify-api-for-python/index.md
   7. /async-shopify-api-for-python/index.txt
   8. https://creativecommons.org/licenses/by/4.0/
   9. /about
  10. https://github.com/gnikyt
  11. /about
  12. /assets/files/cv.pdf
  13. /rss.xml

   Hidden links:
  15. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-1
  16. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-2
  17. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-3
  18. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-4
  19. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-5
  20. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-6
  21. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-7
  22. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-8
  23. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-9
  24. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-10
  25. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-11
  26. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-12
  27. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-13
  28. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-14
  29. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-15
  30. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-16
  31. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-17
  32. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb1-18
  33. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-1
  34. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-2
  35. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-3
  36. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-4
  37. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-5
  38. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-6
  39. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-7
  40. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-8
  41. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-9
  42. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-10
  43. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-11
  44. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-12
  45. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-13
  46. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-14
  47. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-15
  48. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-16
  49. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb2-17
  50. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-1
  51. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-2
  52. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-3
  53. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-4
  54. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-5
  55. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-6
  56. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-7
  57. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-8
  58. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-9
  59. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-10
  60. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-11
  61. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-12
  62. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-13
  63. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-14
  64. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-15
  65. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-16
  66. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-17
  67. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb3-18
  68. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-1
  69. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-2
  70. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-3
  71. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-4
  72. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-5
  73. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-6
  74. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-7
  75. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-8
  76. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-9
  77. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-10
  78. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-11
  79. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-12
  80. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-13
  81. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-14
  82. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-15
  83. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-16
  84. localhost/tmp/lynxXXXX5pdN8f/L376851-1177TMP.html#cb4-17

#!/bin/bash

# TOKEN_MATCH represents the REGEX for token detection.
# Format of `{{(#|^|>|%)(KEY)}}(CONTENT)({{/(KEY)}})`.
readonly TOKEN_MATCH='\{\{([#^>%@])([^}]+?)\}\}(?:(?R)|.)*?\{\{/\2\}\}|\{\{[\w#^>%@./,-]+\}\}'

# Operations.
readonly OP_UNLESS="unless"
readonly OP_IF="if"
readonly OP_INCLUDE="include"
readonly OP_VARIABLE="variable"
readonly OP_FUNCTION="function"

# Tokens.
readonly TOKEN_OPEN_BRACE="{"
readonly TOKEN_CLOSE_BRACE="}"
readonly TOKEN_CLOSE_SLASH="/"
readonly TOKEN_OP_UNLESS="^"
readonly TOKEN_OP_IF="#"
readonly TOKEN_OP_INCLUDE=">"
readonly TOKEN_OP_FUNCTION="%"

# parse_tpl will parse the template and replace variables or run operations.
# Variables:
#   {{handle}}
# If:
#   {{#handle}}We have a handle!{{/handle}}
# Unless:
#   {{^handle}}We do not have a handle!{{/handle}}
# Partials:
#   {{>templates/_partial.html}}
# Functions:
#   {{@foreach var del}}{{key}}:{{value}}{{/split}}
# Etc...
# Goal was to stick close to Mustache features and a high-level.
# Nesting is supported as well.
# This works by finding all matches of the template syntax, then
# going through each match one by one.
# With each match, each character is inspected one by one.
# By going through each character and positions, the applicable
# template action is determined and then processed.
parse_tpl() {
  local match
  local input
  input=$(cat)

  if [[ $input =~ ^templates/.* ]]; then
    # Input is a template, get its contents.
    input=$(cat "$input")
  fi

  # Loop all matches.
  while match=$(echo "$input" | pcregrep -M -o "$TOKEN_MATCH" | head -n 1); [ -n "$match" ]; do
    local prev_char=""
    local next_char=""
    local index=0
    local block_start_index=0
    local in_expr=0
    local is_close=0
    local is_block=0
    local block=""
    local expr=""
    local op=""
    local content=""
    local parsed=""

    while read -r -N1 char; do
      next_char=${match:$index+1:1}
      case $char in
        # Handle opening brace of expression.
        "$TOKEN_OPEN_BRACE")
          if [[ "$prev_char" = "$TOKEN_OPEN_BRACE" ]]; then
            in_expr=1
            if [[ "$next_char" = "$TOKEN_CLOSE_SLASH" ]]; then
              # Next character is slash, this expression is a closing one.
              is_close=1
            fi
          fi
          ;;

        # Handle close brace of expression.
        "$TOKEN_CLOSE_BRACE")
          if [[ "$prev_char" = "$TOKEN_CLOSE_BRACE" ]]; then
            in_expr=0
            if [[ "$op" = "" ]]; then
              # No operation found. Variable output.
              op="$OP_VARIABLE"
            elif [[ $is_block -eq 1 ]]; then
              # We need to break out and handle seperately.
              block_start_index=$((index+1))
              is_block=0
              break
            fi
          fi
          ;;

        # If or looping operation.
        "$TOKEN_OP_IF")
          if [[ $in_expr -eq 1 ]]; then
            expr=""
            op="$OP_IF"
            is_block=1
          fi
          ;;

        # Unless operation.
        "$TOKEN_OP_UNLESS")
          if [[ $in_expr -eq 1 ]]; then
            expr=""
            op="$OP_UNLESS"
            is_block=1
          fi
          ;;

        # Include of partial operation.
        "$TOKEN_OP_INCLUDE")
          if [[ $in_expr -eq 1 ]]; then
            expr=""
            op="$OP_INCLUDE"
          fi
          ;;

        # Function operation.
        "$TOKEN_OP_FUNCTION")
          if [[ $in_expr -eq 1 ]]; then
            expr=""
            op="$OP_FUNCTION"
            is_block=1
          fi
          ;;

        # Handle any other characer.
        *)
          if [[ $in_expr -eq 1 ]]; then
            if [[ $is_close -eq 0 ]]; then
              expr="$expr$char"
            fi
          else
            content="$content$char"
          fi
          ;;
      esac

      # Record this character, increase index.
      prev_char="$char"
      ((index++))
    done < <(echo -n "$match")

    case "$op" in
      # Handle include of partial.
      "$OP_INCLUDE")
        parsed=$(fn_include "$expr")
        input="${input/"$match"/"$parsed"}"
        ;;

      # Handle if.
      "$OP_IF")
        block=$(echo "$match" | extract_block "$expr" "$block_start_index")
        parsed=$(echo "$block" | fn_if "$expr")
        input="${input/"$match"/"$parsed"}"
        ;;

      # Handle unless.
      "$OP_UNLESS")
        block=$(echo "$match" | extract_block "$expr" "$block_start_index")
        parsed=$(echo "$block" | fn_unless "$expr")
        input="${input/"$match"/"$parsed"}"
        ;;

      # Handle variables.
      "$OP_VARIABLE")
        parsed=$(fn_variable "$expr")
        input="${input/"$match"/"$parsed"}"
        ;;

      # Handle functions.
      "$OP_FUNCTION")
        local index=0
        local fn=""
        declare -a FN_ARGS

        # Build out the list of arguments, if any.
        for part in $expr; do
          if [[ $index -eq 0 ]]; then
            fn=$part
          else
            local value="${globals[$part]}"
            if [[ -n "$value" ]]; then
              FN_ARGS+=("$value")
            else
              FN_ARGS+=("$part")
            fi
          fi

          ((index++))
        done

        # Extract the block contents, pipe the block contents into the function with the args.
        block=$(echo "$match" | extract_block "$expr" "$block_start_index")
        result=$(echo "$block" | tpl_"$fn" "${FN_ARGS[@]}")
        input="${input/"$match"/"$result"}"
        ;;

      # Unknown, skip.
      *)
        ;;
    esac
  done

  echo "$input"
}

# extract_block will get the block contents between a tag.
# It accepts two arguments; the first being the function name, the sectond being the start index of the block.
# It will return the contents between the block tags.
extract_block() {
  local match
  local end_index

  match=$(cat -)
  end_index=$(echo "${match:$2}" | grep -b -o "{{/$1}}" | tail -n 1 | cut -d':' -f1)
  echo "${match:$2:$end_index}"
}

# tpl_variable simply outputs the variable.
tpl_variable() {
  echo "${globals[$1]}" | sed '1{/^$/d}'
}

# tpl_include handles including a partial in a template.
# It is ran through parse_tpl.
tpl_include() {
  local contents
  contents="$(cat "$expr")"
  echo "$contents" | parse_tpl
}

# tpl_if handles checking if a variable is truthy.
# If so, the block contents will be displayed.
# If not, the block will be removed.
# Block contents is ran through parse_tpl.
tpl_if() {
  local block
  local value

  block=$(cat -)
  value="${globals[$1]}"
  if [[ -n "$value" ]]; then
    # Passed, return parsed version of block.
    local parsed
    parsed=$(echo "$block" | parse_tpl)
    echo "$parsed"
  else
    # Failed, return nothing.
    echo ""
  fi
}

# tpl_unless handles checking if a variable is empty or not defined.
# If so, the block will be removed.
# If not, the block contents will be displayed.
# Block contents is ran through parse_tpl.
tpl_unless() {
  local block
  local value

  block=$(cat -)
  value="${globals[$1]}"
  if [[ -z "$value" ]]; then
    # Passed, return parsed version of block.
    local parsed
    parsed=$(echo "$block" | parse_tpl)
    echo "$parsed"
  else
    # Failed, return nothing.
    echo ""
  fi
}

# tpl_foreach will loop block contents with provided variable and optional delimiter.
# {{value}} and {{key}} are special inside the block contents, it will be replaced
# respectively with the value and key of the object.
tpl_foreach() {
  local vals
  local parsed
  local tmp
  local value
  local block

  block=$(cat -)
  if [[ -z "$2" ]]; then
    # No delimiter passed in.
    vals="$1"
  else
    # Delimiter passed in.
    readarray -d "$2" -t vals <<< "$1"
  fi
  for key in "${!vals[@]}"; do
    # shellcheck disable=SC2001
    value=$(echo "${vals[$key]}" | sed '1{/^$/d}' | sed 's/[[:space:]]*$//')
    tmp="${block//"{{key}}"/"$key"}"
    tmp="${tmp//"{{value}}"/"$value"}"
    parsed="${parsed}${tmp}"
  done

  echo "$parsed"
}

#!/bin/bash

CWD=$(dirname "$0")
. $CWD/highlight
. $CWD/parse_md
. $CWD/be

# Determine if libraries we need are installed.
ERR=0
CMDS=("pandoc" "tidy" "lynx" "pcregrep" "grep")
for cmd in "${!CMDS[@]}"; do
  # shellcheck disable=SC2086
  if ! [ -x "$(command -v ${CMDS[$cmd]})" ]; then
    echo "Error: \`${CMDS[$cmd]}\` not installed." >&2
    ERR=1
  fi
done
if [[ $ERR -eq 1 ]]; then
  exit 1
fi

# layouts tracks the various layout files.
declare -A LAYOUTS

NEWLINE=$'\n'
COUNT=0
LAYOUT=""
IS_POST=""
IS_PAGE=""
IS_OLD=""
IS_ARCHIVED=""
PARSED_MD=""
DATE=""
HANDLE=""
TITLE=""
CATEGORY=""
ARCHIVE=""
DATE_ISO8601=""
DATE_YMD=""
DATE_HUMAN=""
POST_SIZE=""
RSS_ITEMS=""
SITEMAP_ITEMS=""
HOME_ENTRIES=""
ARCHIVE_ENTRIES=""
POSTS=""
PAGES=""

# Categories.
# Dynamic assignment wont work well.
CMD_ENTRIES=""
CMD_COUNT=0
GOLANG_ENTRIES=""
GOLANG_COUNT=0
SHOPIFY_ENTRIES=""
SHOPIFY_COUNT=0
JAVASCRIPT_ENTRIES=""
JAVASCRIPT_COUNT=0
REACT_ENTRIES=""
REACT_COUNT=0
PHP_ENTRIES=""
PHP_COUNT=0
WORDPRESS_ENTRIES=""
WORDPRESS_COUNT=0
LARAVEL_ENTRIES=""
LARAVEL_COUNT=0
PYTHON_ENTRIES=""
PYTHON_COUNT=0
SYMFONY_ENTRIES=""
SYMFONY_COUNT=0
VUEJS_ENTRIES=""
VUEJS_COUNT=0
RUBY_ENTRIES=""
RUBY_COUNT=0
RAILS_ENTRIES=""
RAILS_COUNT=0
SINATRA_ENTRIES=""
SINATRA_COUNT=0
UNCATEGORIZED_ENTRIES=""
UNCATEGORIZED_COUNT=0
ALL_CATEGORIES=""
ANCHORS=""

# process_posts will generate the posts.
process_posts() {
  local SOURCE
  COUNT=0

  echo "Generating posts..."
  for i in $POSTS; do
    LAYOUT=""
    IS_POST="true"
    IS_PAGE=""
    IS_OLD=""
    IS_ARCHIVED=""

    # Reset key variables.
    BODY=""
    EXCERPT=""
    CATEGORY=""
    ARCHIVE=""

    local LOCAL_LAYOUT
    local START_TS
    local END_TS
    local TARGET
    local TEXT

    SOURCE=$(basename "$i")
    echo "[$SOURCE] Generating..."

    # Grab entire post file content, extract it's body and frontmatter.
    parse_md "$(cat "$i")"

    # Parse Markdown body and convert to HTML.
    PARSED_MD=$(pandoc --highlight=breezedark -f markdown -t html "$i")

    # Setup the dating variables.
    START_TS=$(date -d "$DATE" +"%s")
    END_TS=$(date +"%s")
    DATE_ISO8601=$(date -d "$DATE" +"%Y-%m-%dT%H:%M:%S%z")
    DATE_YMD=$(date -d "$DATE" +"%Y-%m-%d")
    DATE_HUMAN=$(date -d "$DATE" +"%b %d, %Y")
    DIFF_YEARS=$(( (END_TS-START_TS)/(60*60*24)/365 ))
    if [[ $DIFF_YEARS -ge 2 ]]; then
      IS_OLD="true"
    fi

    # Determine if this post is to be archived.
    if [[ $ARCHIVE = "true" ]]; then
      IS_ARCHIVED="true"
    fi

    # Get post size.
    POST_SIZE="$(du -h --apparent-size "$i" | cut -f1)B"

    # Determine save location.
    if [[ $IS_ARCHIVED = "true" ]]; then
      mkdir -p "docs/archive"
      TARGET=docs/archive/"$HANDLE"
    else
      TARGET=docs/"$HANDLE"
    fi

    # Parse the post template and save result.
    LOCAL_LAYOUT=$(cat "${LAYOUTS["post"]}")
    PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
    PARSED_TPL=${PARSED_TPL/'[[parsed_md]]'/"$PARSED_MD"} # Done to avoid template engine from parsing the Markdown result.
    mkdir "$TARGET"
    echo "$PARSED_TPL" > "$TARGET"/index.html

    # Create text and Markdown versions.
    TEXT=$(lynx -hiddenlinks=ignore --stdin --dump < "$TARGET"/index.html)
    TEXT=${TEXT/file:\/\//}
    echo "$TEXT" > "$TARGET"/index.txt
    cp posts/"$SOURCE" "$TARGET"/index.md

    # Create PDF version.
    # pandoc "$i" -o "$target/index.pdf"

    # Parse the post RSS template and save result.
    LOCAL_LAYOUT=$(cat "${LAYOUTS["_rss_item"]}")
    PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
    RSS_ITEMS="${RSS_ITEMS}${NEWLINE}${PARSED_TPL}"

    # Parse the sitemap template and save result.
    LOCAL_LAYOUT=$(cat "${LAYOUTS["_sitemap_item"]}")
    PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
    SITEMAP_ITEMS="${SITEMAP_ITEMS}${NEWLINE}${PARSED_TPL}"

    # Parse the home list template and save result.
    LOCAL_LAYOUT=$(cat "${LAYOUTS["_index_entry"]}")
    PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
    if [[ $IS_ARCHIVED = "true" ]]; then
      # Archived entry.
      ARCHIVE_ENTRIES="${ARCHIVE_ENTRIES}${NEWLINE}${PARSED_TPL}"
      echo -e "\033[1A\033[K[$SOURCE] Generated (archive)"
    else
      # Home entry.
      HOME_ENTRIES="${HOME_ENTRIES}${NEWLINE}${PARSED_TPL}"
    fi

    # Extract all anchor links in PARSED_MD and assign to "ANCHORS".
    # This is used to generate the table of contents.
    INITIAL_ANCHORS=$(echo "$PARSED_MD" | grep -oP '<a[^>]+href="\K[^"]+' | sed 's/ /%20/g')
    ANCHORS=""
    for ANCHOR in $INITIAL_ANCHORS; do
      # If ANCHOR starts with "#cb", then remove the entry from ANCHORS.
      if [[ "$ANCHOR" != "#cb"* ]]; then
        ANCHORS="${ANCHORS} ${ANCHOR}"
      fi
    done
    # Remove leading space from ANCHORS
    ANCHORS="${ANCHORS# }"    

    # Get categories to assign to category entries.
    if [[ -n "$CATEGORY" && "$CATEGORY" != "" ]]; then
      # For each category, assign to a new "[CATEGORY]_ENTRIES" and "[CATEGORY]_COUNT" variables for later use.
      readarray -d "," -t VALS <<< "$CATEGORY"
      for VAL in "${VALS[@]}"; do
        VAL=$(echo "$VAL" | tr -d '\n')
        case "$VAL" in
          cmd)
            CMD_ENTRIES="${CMD_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((CMD_COUNT++))
            ;;
          golang)
            GOLANG_ENTRIES="${GOLANG_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((GOLANG_COUNT++))
            ;;
          shopify)
            SHOPIFY_ENTRIES="${SHOPIFY_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((SHOPIFY_COUNT++))
            ;;
          javascript)
            JAVASCRIPT_ENTRIES="${JAVASCRIPT_ENTRIES}${NEWLINE}${PARSED_TPL}"
            JAVASCRIPT_COUNT=$((JAVASCRIPT_COUNT + 1))
            ;;
          react)
            REACT_ENTRIES="${REACT_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((REACT_COUNT++))
            ;;
          php)
            PHP_ENTRIES="${PHP_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((PHP_COUNT++))
            ;;
          wordpress)
            WORDPRESS_ENTRIES="${WORDPRESS_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((WORDPRESS_COUNT++))
            ;;
          laravel)
            LARAVEL_ENTRIES="${LARAVEL_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((LARAVEL_COUNT++))
            ;;
          python)
            PYTHON_ENTRIES="${PYTHON_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((PYTHON_COUNT++))
            ;;
          symfony)
            SYMFONY_ENTRIES="${SYMFONY_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((SYMFONY_COUNT++))
            ;;
          vuejs)
            VUEJS_ENTRIES="${VUEJS_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((VUEJS_COUNT++))
            ;;
          ruby)
            RUBY_ENTRIES="${RUBY_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((RUBY_COUNT++))
            ;;
          rails)
            RAILS_ENTRIES="${RAILS_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((RAILS_COUNT++))
            ;;
          sinatra)
            SINATRA_ENTRIES="${SINATRA_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((SINATRA_COUNT++))
            ;;
          *)
            # If the category is not recognized, assign it to "uncategorized".
            UNCATEGORIZED_ENTRIES="${UNCATEGORIZED_ENTRIES}${NEWLINE}${PARSED_TPL}"
            ((UNCATEGORIZED_COUNT++))
            ;;
        esac

        if [[ ! "$ALL_CATEGORIES" == *"$VAL"* ]]; then
          ALL_CATEGORIES="${ALL_CATEGORIES}${VAL},"
        fi
      done
    else
      UNCATEGORIZED_ENTRIES="${UNCATEGORIZED_ENTRIES}${NEWLINE}${PARSED_TPL}"
      ((UNCATEGORIZED_COUNT++))
    fi

    echo -e "\033[1A\033[K[$SOURCE] Generated"
    ((COUNT++))
  done
  echo -e "Completed: $COUNT posts\n"
}

# process_pages will generate the pages of the website.
process_pages() {
  local SOURCE
  COUNT=0

  echo "Generating pages..."
  for i in $PAGES; do
    LAYOUT=""
    IS_POST=""
    IS_PAGE="true"

    local LOCAL_LAYOUT
    local TARGET
    local TEXT

    SOURCE=$(basename "$i")
    echo "[$SOURCE] Generating..."

    # Grab entire post file content, extract it's body and frontmatter.
    parse_md "$(cat "$i")"

    # Parse Markdown body and convert to HTML.
    PARSED_MD=$(pandoc -f markdown -t html "$i")

    if [[ "$SOURCE" = "404.md" ]]; then
      # Parse the page template and save the result.
      HANDLE="404"
      LOCAL_LAYOUT=$(cat "${LAYOUTS["page"]}")
      PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
      PARSED_TPL=${PARSED_TPL/'[[parsed_md]]'/"$PARSED_MD"} # Done to avoid template engine from parsing the Markdown result.
      echo "$PARSED_TPL" > docs/404.html
    else
      # Parse the page template and save the result.
      LOCAL_LAYOUT=$(cat "${LAYOUTS["page"]}")
      PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
      PARSED_TPL=${PARSED_TPL/'[[parsed_md]]'/"$PARSED_MD"} # Done to avoid template engine from parsing the Markdown result.
      TARGET=docs/"$HANDLE"
      mkdir -p "$TARGET"
      echo "$PARSED_TPL" > "$TARGET"/index.html

      # Create text and Markdown versions.
      TEXT=$(lynx --stdin --dump < "$TARGET"/index.html)
      echo "$TEXT" > "$TARGET"/index.txt
      cp pages/"$SOURCE" "$TARGET"/index.md

      # Parse the sitemap template and save result.
      DATE_ISO8601=$(date -d "now" +"%Y-%m-%dT%H:%M:%S%z")
      PARSED_TPL=$(echo "${LAYOUTS["_sitemap_item"]}" | be)
      SITEMAP_ITEMS="${SITEMAP_ITEMS}${NEWLINE}${PARSED_TPL}"
    fi

    echo -e "\033[1A\033[K[$SOURCE] Generated"
    ((COUNT++))
  done
  echo -e "Completed: $COUNT pages\n"
}

# process_rss will generate an RSS feed of the posts.
process_rss() {
  echo "Generating RSS..."
  local LOCAL_LAYOUT
  LAYOUT="rss"
  IS_POST=""
  IS_PAGE=""
  LOCAL_LAYOUT=$(cat "${LAYOUTS["rss"]}")
  PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
  echo "$PARSED_TPL" > docs/rss.xml
  echo -e "Completed\n"
}

# process_index will generate the index of the website.
process_index() {
  echo "Generating index..."
  LAYOUT="index"
  IS_POST=""
  IS_PAGE="true"
  TITLE="gnikyt"
  HANDLE="home"

  local LOCAL_LAYOUT
  local TEXT

  # Parse the index layout and save the result.
  LOCAL_LAYOUT=$(cat "${LAYOUTS["index"]}")
  PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
  PARSED_TPL=${PARSED_TPL/gnikyt | gnikyt/gnikyt}
  echo "$PARSED_TPL" > docs/index.html

  # Create text version.
  TEXT=$(lynx --stdin --dump < docs/index.html)
  echo "$TEXT" > docs/index.txt

  echo -e "Completed\n"
}

# process_archive will generate the index of the website archive.
process_archive() {
  echo "Generating archive..."
  LAYOUT="archive"
  IS_POST=""
  IS_PAGE="true"
  TITLE="gnikyt"
  HANDLE="archive"

  local LOCAL_LAYOUT
  local TARGET
  local TEXT

  # Parse the archive layout and save the result.
  TARGET=docs/archive
  mkdir -p "$TARGET"
  LOCAL_LAYOUT=$(cat "${LAYOUTS["archive"]}")
  PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
  PARSED_TPL=${PARSED_TPL/gnikyt | gnikyt/Archive | gnikyt}
  echo "$PARSED_TPL" > "$TARGET"/index.html

  # Create text version.
  TEXT=$(lynx --stdin --dump < "$TARGET"/index.html)
  echo "$TEXT" > "$TARGET"/index.txt

  # Parse the sitemap template and save result.
  HANDLE="archive"
  DATE_ISO8601=$(date -d "now" +"%Y-%m-%dT%H:%M:%S%z")
  LOCAL_LAYOUT=$(cat "${LAYOUTS["_sitemap_item"]}")
  PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
  SITEMAP_ITEMS="${SITEMAP_ITEMS}${NEWLINE}${PARSED_TPL}"

  echo -e "Completed\n"
}

# process_categories will generate an index of posts by category.
process_categories() {
  echo "Generating categories..."

  local CATEGORY_ENTRIES=""
  local CATEGORY_COUNT=0
  COUNT=0

  ALL_CATEGORIES="${ALL_CATEGORIES}uncategorized"
  readarray -d "," -t VALS <<< "$ALL_CATEGORIES"
  for VAL in "${VALS[@]}"; do
    VAL=$(echo "$VAL" | tr -d '\n')
    echo "[$VAL] Generating..."

    LAYOUT="category"
    IS_POST=""
    IS_PAGE="true"
    TITLE="gnikyt"
    HANDLE="$VAL"
    CATEGORY="$VAL"
    CATEGORY_ENTRIES=""
    CATEGORY_COUNT=0

    case "$VAL" in
      cmd)
        CATEGORY_ENTRIES="$CMD_ENTRIES"
        CATEGORY_COUNT=$CMD_COUNT
        ;;
      golang)
        CATEGORY_ENTRIES="$GOLANG_ENTRIES"
        CATEGORY_COUNT=$GOLANG_COUNT
        ;;
      shopify)
        CATEGORY_ENTRIES="$SHOPIFY_ENTRIES"
        CATEGORY_COUNT=$SHOPIFY_COUNT
        ;;
      javascript)
        CATEGORY_ENTRIES="$JAVASCRIPT_ENTRIES"
        CATEGORY_COUNT=$JAVASCRIPT_COUNT
        ;;
      react)
        CATEGORY_ENTRIES="$REACT_ENTRIES"
        CATEGORY_COUNT=$REACT_COUNT
        ;;
      php)
        CATEGORY_ENTRIES="$PHP_ENTRIES"
        CATEGORY_COUNT=$PHP_COUNT
        ;;
      wordpress)
        CATEGORY_ENTRIES="$WORDPRESS_ENTRIES"
        CATEGORY_COUNT=$WORDPRESS_COUNT
        ;;
      laravel)
        CATEGORY_ENTRIES="$LARAVEL_ENTRIES"
        CATEGORY_COUNT=$LARAVEL_COUNT
        ;;
      python)
        CATEGORY_ENTRIES="$PYTHON_ENTRIES"
        CATEGORY_COUNT=$PYTHON_COUNT
        ;;
      symfony)
        CATEGORY_ENTRIES="$SYMFONY_ENTRIES"
        CATEGORY_COUNT=$SYMFONY_COUNT
        ;;
      vuejs)
        CATEGORY_ENTRIES="$VUEJS_ENTRIES"
        CATEGORY_COUNT=$VUEJS_COUNT
        ;;
      ruby)
        CATEGORY_ENTRIES="$RUBY_ENTRIES"
        CATEGORY_COUNT=$RUBY_COUNT
        ;;
      rails)
        CATEGORY_ENTRIES="$RAILS_ENTRIES"
        CATEGORY_COUNT=$RAILS_COUNT
        ;;
      sinatra)
        CATEGORY_ENTRIES="$SINATRA_ENTRIES"
        CATEGORY_COUNT=$SINATRA_COUNT
        ;;
      uncategorized | *)
        # If the category is not recognized, assign it to "UNCATEGORIZED".
        VAL="uncategorized"
        CATEGORY="uncategorized"
        CATEGORY_ENTRIES="$UNCATEGORIZED_ENTRIES"
        CATEGORY_COUNT=$UNCATEGORIZED_COUNT
        ;;
    esac

    local LOCAL_LAYOUT
    local TARGET

    # Make category directory.
    TARGET=docs/category/"$VAL"
    mkdir -p "$TARGET"

    # Parse the category layout and save the result.
    HANDLE="category/${VAL}"
    LOCAL_LAYOUT=$(cat "${LAYOUTS["category"]}")
    PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
    PARSED_TPL=${PARSED_TPL/gnikyt | gnikyt/Category: "$VAL" | gnikyt}
    echo "$PARSED_TPL" > "$TARGET"/index.html

    # Create text version.
    TEXT=$(lynx --stdin --dump < "$TARGET"/index.html)
    echo "$TEXT" > "$TARGET"/index.txt

    # Parse the categories list template and save result.
    LOCAL_LAYOUT=$(cat "${LAYOUTS["_categories_entry"]}")
    PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
    CATEGORIES_ENTRIES="${CATEGORIES_ENTRIES}${NEWLINE}${PARSED_TPL}"

    # Parse the sitemap template and save result.
    DATE_ISO8601=$(date -d "now" +"%Y-%m-%dT%H:%M:%S%z")
    LOCAL_LAYOUT=$(cat "${LAYOUTS["_sitemap_item"]}")
    PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
    SITEMAP_ITEMS="${SITEMAP_ITEMS}${NEWLINE}${PARSED_TPL}"

    echo -e "\033[1A\033[K[$VAL] Generated"
    ((COUNT++))
  done

  # Categories template.
  TITLE="Categories"
  HANDLE="category"
  TARGET="docs/category"
  LOCAL_LAYOUT=$(cat "${LAYOUTS["categories"]}")
  PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
  echo "$PARSED_TPL" > "$TARGET"/index.html

  # Create text version.
  TEXT=$(lynx --stdin --dump < "$TARGET"/index.html)
  echo "$TEXT" > "$TARGET"/index.txt

  # Parse the sitemap template and save result.
  DATE_ISO8601=$(date -d "now" +"%Y-%m-%dT%H:%M:%S%z")
  LOCAL_LAYOUT=$(cat "${LAYOUTS["_sitemap_item"]}")
  PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
  SITEMAP_ITEMS="${SITEMAP_ITEMS}${NEWLINE}${PARSED_TPL}"

  echo -e "Completed: $COUNT categories\n"
}

# process_sitemap will generate a sitemap.
process_sitemap() {
  local LOCAL_LAYOUT

  echo "Generating sitemap..."
  LAYOUT="sitemap"
  IS_POST=""
  IS_PAGE=""
  LOCAL_LAYOUT=$(cat "${LAYOUTS["sitemap"]}")
  PARSED_TPL=$(echo "$LOCAL_LAYOUT" | be)
  echo "$PARSED_TPL" > docs/sitemap.xml

  echo -e "Completed\n"
}

# create_highlight will use Pandoc to generate the CSS for highlighting code.
create_highlight() {
  echo "Generating highlighting..."
  CSS=$(highlight)
  echo "$CSS" > static/assets/styles/highlight.css
  echo -e "Completed\n"
}

# tidy_markup will tidy the HTML and XML.
tidy_markup() {
  local RESULT
  local DOPTS
  DOPTS="--indent yes \
      --indent-spaces 2 \
      --vertical-space yes \
      --drop-empty-elements no \
      --show-warnings no \
      --wrap 120 \
      --sort-attributes alpha \
      --tidy-mark no \
      --quiet yes"

  echo "Tidying markup..."
  # shellcheck disable=SC2044
  for i in $(find docs -name "*.html" -type f); do
    # shellcheck disable=SC2086
    RESULT=$(tidy $DOPTS < "$i")
    echo "$RESULT" > "$i"
  done

  # shellcheck disable=SC2086
  RESULT=$(tidy --input-xml yes --output-xml yes $DOPTS < docs/rss.xml)
  echo "$RESULT" > docs/rss.xml

  # shellcheck disable=SC2086
  RESULT=$(tidy --input-xml yes --output-xml yes $DOPTS < docs/sitemap.xml)
  echo "$RESULT" > docs/sitemap.xml

  echo -e "Completed\n"
}

# main will process all posts and pages.
main() {
  # Clear docs.
  rm -r docs/* 2> /dev/null

  # Find all posts.
  POSTS=$(find posts -name "*.md" -type f | sort -r)

  # Find all pages.
  PAGES=$(find pages -name "*.md" -type f | sort)

  # Get all layout files.
  # shellcheck disable=SC2044
  for i in $(find templates -type f); do
    LAYOUTS[$(basename "${i%.*}")]=$i
  done

  # Processing.
  process_posts
  process_pages
  process_index
  process_archive
  process_categories
  process_rss
  process_sitemap
  create_highlight
  tidy_markup

  # Copy static files to docs.
  cp -R static/* docs/
  cp static/.nojekyll docs/
}

main

<!DOCTYPE html>
<html>
<head>
	<!-- Theme: Attila by zutrinken, powered by: Ghost -->
	<meta charset="utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

	<title>ActiveRecord and Liquid Drops with Sinatra</title>

	<meta name="HandheldFriendly" content="True" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />

	<link rel="stylesheet" type="text/css" href="../assets/css/style.css?v=4f8314772c" />

	<link rel="shortcut icon" href="../favicon.png" type="image/png" />
    <link rel="canonical" href="index.html" />
    <meta name="referrer" content="no-referrer-when-downgrade" />
    <link rel="amphtml" href="amp/index.html" />
    
    <meta property="og:site_name" content="OhMyBrew!" />
    <meta property="og:type" content="article" />
    <meta property="og:title" content="ActiveRecord and Liquid Drops with Sinatra" />
    <meta property="og:description" content="Normally I use ERB when doing templates but there was a special use-case recently where I needed to allow the app user to modify a specific template. Liquid templates (what Jekyll and Shopify uses) was perfect for this situation because it has a simple syntax for anyone to pick up" />
    <meta property="og:url" content="https://ohmybrew.com/activerecord-and-liquid-drops-with-sinatra/" />
    <meta property="article:published_time" content="2015-10-15T02:00:00.000Z" />
    <meta property="article:modified_time" content="2018-02-21T16:30:12.000Z" />
    <meta property="article:tag" content="sinatra" />
    <meta property="article:tag" content="ruby" />
    <meta property="article:tag" content="process" />
    <meta property="article:tag" content="liquid" />
    
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content="ActiveRecord and Liquid Drops with Sinatra" />
    <meta name="twitter:description" content="Normally I use ERB when doing templates but there was a special use-case recently where I needed to allow the app user to modify a specific template. Liquid templates (what Jekyll and Shopify uses) was perfect for this situation because it has a simple syntax for anyone to pick up" />
    <meta name="twitter:url" content="https://ohmybrew.com/activerecord-and-liquid-drops-with-sinatra/" />
    <meta name="twitter:label1" content="Written by" />
    <meta name="twitter:data1" content="Tyler King" />
    <meta name="twitter:label2" content="Filed under" />
    <meta name="twitter:data2" content="sinatra, ruby, process, liquid" />
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "OhMyBrew!",
        "logo": {
            "@type": "ImageObject",
            "url": "https://ohmybrew.com/favicon.png",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Tyler King",
        "image": {
            "@type": "ImageObject",
            "url": "//www.gravatar.com/avatar/b866d161c9f02b7384a0940cb07135bc?s=250&d=mm&r=x",
            "width": 250,
            "height": 250
        },
        "url": "https://ohmybrew.com/author/tyler-king/",
        "sameAs": [
            "https://ohmybrew.com"
        ]
    },
    "headline": "ActiveRecord and Liquid Drops with Sinatra",
    "url": "https://ohmybrew.com/activerecord-and-liquid-drops-with-sinatra/",
    "datePublished": "2015-10-15T02:00:00.000Z",
    "dateModified": "2018-02-21T16:30:12.000Z",
    "keywords": "sinatra, ruby, process, liquid",
    "description": "Normally I use ERB when doing templates but there was a special use-case recently where I needed to allow the app user to modify a specific template. Liquid templates (what Jekyll and Shopify uses) was perfect for this situation because it has a simple syntax for anyone to pick up",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://ohmybrew.com/"
    }
}
    </script>

    <script type="text/javascript" src="../public/ghost-sdk.js?v=4f8314772c"></script>
<script type="text/javascript">
ghost.init({
	clientId: "ghost-frontend",
	clientSecret: "af2244026b4c"
});
</script>
    <meta name="generator" content="Ghost 1.21" />
    <link rel="alternate" type="application/rss+xml" title="OhMyBrew!" href="../rss/index.html" />
    <script async src="https://www.google-analytics.com/analytics.js"></script>
<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-101589108-1', 'auto');
    ga('send', 'pageview');
</script>
</head>

<body class="post-template tag-sinatra tag-ruby tag-process tag-liquid">
	
	<nav id="menu">
	<a class="close-button">Close</a>
	<div class="nav-wrapper">
		<p class="nav-label">Menu</p>
		<ul>
			<li class="nav-home" role="presentation"><a href="../index.html">Home</a></li>
			<li class="nav-github" role="presentation"><a href="https://github.com/ohmybrew"><i class="ic ic-star"></i> Github</a></li>
			
			<li class="nav-rss"><a href="../rss/index.html"><i class="ic ic-rss"></i> Subscribe</a></li>
		</ul>
	</div>
</nav>
	
	<section id="wrapper">
		<a class="hidden-close"></a>
		

<div class="progress-container">
	<span class="progress-bar"></span>
</div>

<header id="post-header">
	<div class="inner">
		<nav id="navigation">
			<span id="home-button" class="nav-button">
				<a class="home-button" href="../index.html" title="Home"><i class="ic ic-arrow-left"></i> Home</a>
			</span>
			<span id="menu-button" class="nav-button">
				<a class="menu-button"><i class="ic ic-menu"></i> Menu</a>
			</span>
		</nav>
		<h1 class="post-title">ActiveRecord and Liquid Drops with Sinatra</h1>
		<span class="post-meta"><a href="../author/tyler-king/index.html">Tyler King</a> | <time datetime="2015-10-14">14 Oct 2015</time></span>
		
	</div>
</header>

<main class="content" role="main">
	<article class="post tag-sinatra tag-ruby tag-process tag-liquid">
		<div class="inner">

			<section class="post-content">
				<div class="kg-card-markdown"><p>Normally I use ERB when doing templates but there was a special use-case recently where I needed to allow the app user to modify a specific template. <a href="http://liquidmarkup.org/">Liquid templates</a> (what Jekyll and Shopify uses) was perfect for this situation because it has a simple syntax for anyone to pick up and its also safe due to it's scope limited to whats passed to the template.</p>
<p>Let's suppose you have two models in your Sinatra application -- <code>Student</code> and <code>Book</code>.</p>
<pre><code class="language-ruby"># app/models/student_model.rb
module MyApp
  module Model
    class Student
      has_many :books
    end
  end
end

# app/models/book_model.rb
module MyApp
  module Model
    class Book
      belongs_to :student
    end
  end
end
</code></pre>
<p>Now, Liquid has what they call a <a href="https://github.com/Shopify/liquid/wiki/Introduction-to-Drops">Drop</a>, where you can easily build a plain class which Liquid can then use directly when rendering the template. As the <a href="https://github.com/Shopify/liquid/wiki/Introduction-to-Drops">Drop Introduction</a> states, it acts &quot;like&quot; a hash so the methods you create can be accessed with dot-notation in the template. Example: <code>{% raw %}{{ student.full_name }}{% endraw %}</code></p>
<p>So let's create a <code>Student</code> drop and a <code>Book</code> drop and give the templates some basic variables from the model to access.</p>
<pre><code class="language-ruby"># app/drops/student_drop.rb
module MyApp
  module Drop
    class Student
      def initialize(student)
        @student = student
      end
      
      def full_name
        &quot;#{@student.first_name} {@student.last_name}&quot;
      end
      
      def allergies
        @student.allergies.split ','
      end
      
      def books
        @student.books
      end
    end
  end
end

# app/drops/book_drop.rb
module MyApp
  module Drop
    class Book
      def initialize(book)
        @book = book
      end

      def title
        @book.title
      end
      
      def barcode
        @book.barcode
      end
      
      def date_printed
        @book.date_printed
      end
    end
  end
end
</code></pre>
<p>Ok so now we have our models and drops setup. As you can see above we've setup methods for accessing the student's name, their books, the book title, barcode, etc. All of these methods can be used in a Liquid template now.</p>
<p>But now, how do we easily combine the two? Easy, we utilize <code>to_liquid</code> method by adding it to our model which Liquid calls when rendering the template. We then return the proper drop for the model inside the new <code>to_liquid</code> method.</p>
<pre><code class="language-ruby"># app/models/student_model.rb
module MyApp
  module Model
    class Student
      has_many :books
      
      def to_liquid
        Drop::Student.new self
      end
    end
  end
end

# app/models/book_model.rb
module MyApp
  module Model
    class Book
      belongs_to :student
      
      def to_liquid
        Drop::Book.new self
      end
    end
  end
end
</code></pre>
<p>That's pretty much it. We've now:</p>
<ol>
<li>Created our models</li>
<li>Created our drops</li>
<li>Modified our models to return a drop</li>
</ol>
<p>With all this combined we can then use it all together as such:</p>
<pre><code class="language-ruby"># app/controllers/front_controller.rb
...
student = Model::Student.find params[:id]
liquid :'front/test', layout: :layout_front, locals: {'student' =&gt; student}
</code></pre>
<pre><code class="language-erb">{% raw %}
# app/views/front/test.liquid
My name is {{ student.full_name }}. I have {{ student.books.size }} books!
{% endraw %}
</code></pre>
<p>That's it for this little how-to. I will note there is other ways to expose your ActiveRecord models to work automatically with Liquid but this article just shows you a more expanded and controlled version.</p>
</div>
			</section>

			<section class="post-info">

				<div class="post-share">
					<a class="twitter" href="https://twitter.com/share?text=ActiveRecord and Liquid Drops with Sinatra&url=https://ohmybrew.com/activerecord-and-liquid-drops-with-sinatra/" onclick="window.open(this.href, 'twitter-share', 'width=550,height=235');return false;">
						<i class="ic ic-twitter"></i><span class="hidden">Twitter</span>
					</a>
					<a class="facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://ohmybrew.com/activerecord-and-liquid-drops-with-sinatra/" onclick="window.open(this.href, 'facebook-share','width=580,height=296');return false;">
						<i class="ic ic-facebook"></i><span class="hidden">Facebook</span>
					</a>
					<a class="googleplus" href="https://plus.google.com/share?url=https://ohmybrew.com/activerecord-and-liquid-drops-with-sinatra/" onclick="window.open(this.href, 'google-plus-share', 'width=490,height=530');return false;">
						<i class="ic ic-googleplus"></i><span class="hidden">Google+</span>
					</a>
					<div class="clear"></div>
				</div>

				<aside class="post-tags">
					<a href="../tag/sinatra/index.html">sinatra</a> <a href="../tag/ruby/index.html">ruby</a> <a href="../tag/process/index.html">process</a> <a href="../tag/liquid/index.html">liquid</a>
				</aside>

				<div class="clear"></div>

				<aside class="post-author">
					<figure class="post-author-avatar avatar">
							<img src="http://www.gravatar.com/avatar/b866d161c9f02b7384a0940cb07135bc?s=250&amp;d=mm&amp;r=x" alt="Tyler King" />
					</figure>
					<div class="post-author-bio">
						<h4 class="post-author-name"><a href="../author/tyler-king/index.html">Tyler King</a></h4>
							<p class="post-author-about">I'm a loving father, passionate homebrewer, motorcycle rider, and of course.. a coder. I develop solutions through experience.</p>
							<span class="post-author-location"><i class="ic ic-location"></i> Newfoundland</span>
							<span class="post-author-website"><i class="ic ic-link"></i> <a href="https://ohmybrew.com">Website</a></span>
					</div>
					<div class="clear"></div>
				</aside>

			</section>


			<section class="post-comments">
				<a id="show-disqus" class="post-comments-activate">Show Comments</a>
			    <div id="disqus_thread"></div>
			</section>


			<aside class="post-nav">
					<a class="post-nav-next" href="../now-kegging/index.html">
						<section class="post-nav-teaser">
							<i class="ic ic-arrow-left"></i>
							<h2 class="post-nav-title">Now: Kegging</h2>
							<p class="post-nav-excerpt">Under the tree Christmas day, there was a large wrapped box from&hellip;</p>
						</section>
					</a>
					<a class="post-nav-prev" href="../calculating-percent-saved-with-shopify/index.html">
						<section class="post-nav-teaser">
							<i class="ic ic-arrow-right"></i>
							<h2 class="post-nav-title">Calculating Percent Saved with Shopify</h2>
							<p class="post-nav-excerpt">Visually displaying to the customer how much they are saving is a&hellip;</p>
						</section>
					</a>
				<div class="clear"></div>
			</aside>


		</div>
	</article>
</main>


		<div id="body-class" style="display: none;" class="post-template tag-sinatra tag-ruby tag-process tag-liquid"></div>
	
		<footer id="footer">
			<div class="inner">
			</div>
		</footer>
	</section>

	<script type="text/javascript" src="../assets/js/script.js?v=4f8314772c"></script>

	
</body>
</html>

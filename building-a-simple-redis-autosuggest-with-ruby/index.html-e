<!DOCTYPE html>
<html>
<head>
	<!-- Theme: Attila by zutrinken, powered by: Ghost -->
	<meta charset="utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

	<title>Building a Simple Redis Autosuggest with Ruby</title>

	<meta name="HandheldFriendly" content="True" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />

	<link rel="stylesheet" type="text/css" href="../assets/css/style.css?v=4f8314772c" />

	<link rel="shortcut icon" href="../favicon.png" type="image/png" />
    <link rel="canonical" href="index.html" />
    <meta name="referrer" content="no-referrer-when-downgrade" />
    <link rel="amphtml" href="amp/index.html" />
    
    <meta property="og:site_name" content="OhMyBrew!" />
    <meta property="og:type" content="article" />
    <meta property="og:title" content="Building a Simple Redis Autosuggest with Ruby" />
    <meta property="og:description" content="So you have a search box on your website.. an article search, a product search.. whatever it may be, you may find yourself the need to display suggested results to your user based on what they type. Redis is the perfect solution. Planning Let&#x27;s say we have a bunch of" />
    <meta property="og:url" content="https://ohmybrew.com/building-a-simple-redis-autosuggest-with-ruby/" />
    <meta property="article:published_time" content="2016-03-02T01:02:11.000Z" />
    <meta property="article:modified_time" content="2018-02-21T16:16:40.000Z" />
    <meta property="article:tag" content="ruby" />
    <meta property="article:tag" content="programming" />
    <meta property="article:tag" content="process" />
    
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content="Building a Simple Redis Autosuggest with Ruby" />
    <meta name="twitter:description" content="So you have a search box on your website.. an article search, a product search.. whatever it may be, you may find yourself the need to display suggested results to your user based on what they type. Redis is the perfect solution. Planning Let&#x27;s say we have a bunch of" />
    <meta name="twitter:url" content="https://ohmybrew.com/building-a-simple-redis-autosuggest-with-ruby/" />
    <meta name="twitter:label1" content="Written by" />
    <meta name="twitter:data1" content="Tyler King" />
    <meta name="twitter:label2" content="Filed under" />
    <meta name="twitter:data2" content="ruby, programming, process" />
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "OhMyBrew!",
        "logo": {
            "@type": "ImageObject",
            "url": "https://ohmybrew.com/favicon.png",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Tyler King",
        "image": {
            "@type": "ImageObject",
            "url": "//www.gravatar.com/avatar/b866d161c9f02b7384a0940cb07135bc?s=250&d=mm&r=x",
            "width": 250,
            "height": 250
        },
        "url": "https://ohmybrew.com/author/tyler-king/",
        "sameAs": [
            "https://ohmybrew.com"
        ]
    },
    "headline": "Building a Simple Redis Autosuggest with Ruby",
    "url": "https://ohmybrew.com/building-a-simple-redis-autosuggest-with-ruby/",
    "datePublished": "2016-03-02T01:02:11.000Z",
    "dateModified": "2018-02-21T16:16:40.000Z",
    "keywords": "ruby, programming, process",
    "description": "So you have a search box on your website.. an article search, a product search.. whatever it may be, you may find yourself the need to display suggested results to your user based on what they type. Redis is the perfect solution. Planning Let&#x27;s say we have a bunch of",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://ohmybrew.com/"
    }
}
    </script>

    <script type="text/javascript" src="../public/ghost-sdk.js?v=4f8314772c"></script>
<script type="text/javascript">
ghost.init({
	clientId: "ghost-frontend",
	clientSecret: "af2244026b4c"
});
</script>
    <meta name="generator" content="Ghost 1.21" />
    <link rel="alternate" type="application/rss+xml" title="OhMyBrew!" href="../rss/index.html" />
    <script async src="https://www.google-analytics.com/analytics.js"></script>
<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-101589108-1', 'auto');
    ga('send', 'pageview');
</script>
</head>

<body class="post-template tag-ruby tag-programming tag-process">
	
	<nav id="menu">
	<a class="close-button">Close</a>
	<div class="nav-wrapper">
		<p class="nav-label">Menu</p>
		<ul>
			<li class="nav-home" role="presentation"><a href="../index.html">Home</a></li>
			<li class="nav-github" role="presentation"><a href="https://github.com/ohmybrew"><i class="ic ic-star"></i> Github</a></li>
			
			<li class="nav-rss"><a href="../rss/index.html"><i class="ic ic-rss"></i> Subscribe</a></li>
		</ul>
	</div>
</nav>
	
	<section id="wrapper">
		<a class="hidden-close"></a>
		

<div class="progress-container">
	<span class="progress-bar"></span>
</div>

<header id="post-header">
	<div class="inner">
		<nav id="navigation">
			<span id="home-button" class="nav-button">
				<a class="home-button" href="../index.html" title="Home"><i class="ic ic-arrow-left"></i> Home</a>
			</span>
			<span id="menu-button" class="nav-button">
				<a class="menu-button"><i class="ic ic-menu"></i> Menu</a>
			</span>
		</nav>
		<h1 class="post-title">Building a Simple Redis Autosuggest with Ruby</h1>
		<span class="post-meta"><a href="../author/tyler-king/index.html">Tyler King</a> | <time datetime="2016-03-01">01 Mar 2016</time></span>
		
	</div>
</header>

<main class="content" role="main">
	<article class="post tag-ruby tag-programming tag-process">
		<div class="inner">

			<section class="post-content">
				<div class="kg-card-markdown"><p>So you have a search box on your website.. an article search, a product search.. whatever it may be, you may find yourself the need to display suggested results to your user based on what they type. Redis is the perfect solution.</p>
<h2 id="planning">Planning</h2>
<p>Let's say we have a bunch of products:</p>
<ul>
<li>Tommy's Ray Gun - ID: 1</li>
<li>1990 Blaster Ray!! - ID: 2</li>
<li>(Nuke) Bomb Gun #8 - ID: 3</li>
</ul>
<p>Looking at our products, we can see there is a different and unpredictable titles. We have punctuation, special characters, numbers, and letters. If someone types <code>Gun</code> we'd like to see our search suggest <code>(Nuke) Bomb Gun #8</code> and <code>Tommy's Ray Gun</code>.</p>
<p>Redis does not offer a full-text search solution like ElasticSearch, so we simply can't drop <code>Tommy's Ray Gun</code> string into Redis and expect to search it. We need to come up with a clever way.</p>
<p>My solution was to split each letter up of each word in each product. For each letter set, we store the products which contain those letters. So common sets of letters in titles will be stored together.</p>
<p>As a basic example, lets look at a singular word. <code>RUBY</code> we can split this up into <code>R</code> then <code>RU</code> then <code>RUB</code> and finally <code>RUBY</code>.</p>
<p>Lets store these product titles in this manner with the values being the title and ID for the product into a <a href="http://redis.io/commands/ZADD">Redis sorted set</a>. Now, when someone types <code>gun</code> in your search box we should be able to call <code>p:gun</code> key on Redis and get:</p>
<ul>
<li><code>Tommy's Ray Gun//1</code></li>
<li><code>(Nuke) Bomb Gun #8//3</code></li>
</ul>
<h2 id="processingtheobjects">Processing the Objects</h2>
<p>So now we have a plan in place, lets write a quick script to import the objects you wish to autosuggest, into your Redis database. As before, we need to split each word up of each object.</p>
<pre><code class="language-ruby">
# autosuggest.rb
require &quot;redis&quot;

redis = Redis.new
redis.flushdb # Resets to a clean database

def clean_title(title)
    # Change to your needs
    title.downcase.gsub(/-/, &quot; &quot;).gsub(/[^0-9a-z ]/, &quot;&quot;)
end

# Our list of products
products = [
  {id: 1, title: &quot;Tommy's Ray Gun&quot;},
  {id: 2, title: &quot;1990 Blaster Ray!!&quot;},
  {id: 3, title: &quot;(Nuke) Bomb Gun #8&quot;}
]

products.each do |product|
  puts &quot;Processing #{product[:title]}...&quot;

  # Clean the title, split up into parts
  clean_title(product[:title]).split(&quot; &quot;).each do |part|
      1.upto(part.length) do |len|
          next if len == 1 # So we do not have a key of 1 length

          # Output a piece of each part
          puts part[0...len]
      end
  end
end
</code></pre>
<p>If you run this into your terminal it should output:</p>
<pre><code>&gt; ruby autosuggest.rb
Processing Tommy\'s Ray Gun...
&quot;to&quot; &quot;tom&quot; &quot;tomm&quot; &quot;tommy&quot; &quot;tommys&quot; &quot;ra&quot; &quot;ray&quot; &quot;gu&quot; &quot;gun&quot;
Processing 1990 Blaster Ray!!...
&quot;19&quot; &quot;199&quot; &quot;1990&quot; &quot;bl&quot; &quot;bla&quot; &quot;blas&quot; &quot;blast&quot; &quot;blaste&quot; &quot;blaster&quot; &quot;ra&quot; &quot;ray&quot;
Processing (Nuke) Bomb Gun #8...
&quot;nu&quot; &quot;nuk&quot; &quot;nuke&quot; &quot;bo&quot; &quot;bom&quot; &quot;bomb&quot; &quot;gu&quot; &quot;gun&quot;
</code></pre>
<p>Here we can see how the script cleans the titles, then breaks them down to produce key names for Redis to use as we had hoped for in the planning section. Now, lets import this into Redis. Simply change line 27:</p>
<pre><code class="language-ruby"># BEFORE
puts part[0...len]

# AFTER
redis.zadd &quot;p:#{part[0...len]}&quot;, 0, &quot;#{product[:title]}//#{product[:id]}&quot;
</code></pre>
<p>This will now store the titles for the objects as planned into a sorted list on Redis, where common sets of parts will group objects together. Go ahead and run your script again.</p>
<pre><code>&gt; ruby autosuggest.rb
Processing Tommy's Ray Gun...
Processing 1990 Blaster Ray!!...
Processing (Nuke) Bomb Gun #8...
</code></pre>
<p>Login to Redis and lets check if it works as planned. Since this is a sorted set we need to use <a href="http://redis.io/commands/ZRANGE">ZRANGE</a>.</p>
<pre><code>&gt; redis-cli
127.0.0.1:6379&gt; ZRANGE p:gun 0 -1
1) &quot;(Nuke) Bomb Gun #8//3&quot;
2) &quot;Tommy's Ray Gun//1&quot;
127.0.0.1:6379&gt; ZRANGE p:nuke 0 -1
1) &quot;(Nuke) Bomb Gun #8//3&quot;
</code></pre>
<p>Awesome, it works! We now have sorted sets with groups of products based on parts of the words in the object titles.</p>
<h2 id="frontend">Frontend</h2>
<p>Now that we have a script (that you should expand on into a proper lib), we need to now show results to the user for when they're searching.</p>
<p>Heres a quick Sinatra example (of course you can use more advanced techniques as well)</p>
<pre><code class="language-ruby">require &quot;redis&quot;
require &quot;json&quot;
require &quot;securerandom&quot;
require &quot;sinatra/base&quot;
require &quot;sinatra/jsonp&quot;

module YourApp
  class AutoComplete &lt; Sinatra::Base
    helpers Sinatra::Jsonp

    configure {set :redis, Redis.new}

    get &quot;/&quot; do
      # Clean the query and get each word
      sets = []
      clean_query(params[&quot;q&quot;]).split(&quot; &quot;).each {|word| sets &lt;&lt; &quot;p:#{word}&quot;}

      # Get the common results in a temporary key
      tmp_key = &quot;tmp_#{SecureRandom.uuid[0...8]}&quot;
      settings.redis.zinterstore tmp_key, sets
      results = settings.redis.zrange tmp_key, 0, -1
      settings.redis.del tmp_key

      # Output results as JSON to browser
      jsonp results.to_json
    end

    private
    def clean_query(query)
      # Remove all special characters and adjusts naming
      query.downcase.gsub(/-/, &quot; &quot;).gsub(/[^0-9a-z ]/, &quot;&quot;)
    end
  end
end
</code></pre>
<p>By calling <code>/?q=some+text</code>, we create a key for each word passed. So <code>some+text</code> goes into the <code>sets</code> variable and becomes <code>[&quot;p:some&quot;, &quot;p:text&quot;]</code>.</p>
<p>Next, we create a temporary key to use with <a href="http://redis.io/commands/ZINTERSTORE">zinterstore</a> which computes intersection between keys (our <code>p:some</code> and <code>p:text</code>). This finds products that have both the words some and text in their title. We then use zrange to get the result of the intersection and delete the temporary key.</p>
<p>Finally, send the results as JSON. You can use AJAX to actively call the Sinatra app when the user is typing.</p>
</div>
			</section>

			<section class="post-info">

				<div class="post-share">
					<a class="twitter" href="https://twitter.com/share?text=Building a Simple Redis Autosuggest with Ruby&url=https://ohmybrew.com/building-a-simple-redis-autosuggest-with-ruby/" onclick="window.open(this.href, 'twitter-share', 'width=550,height=235');return false;">
						<i class="ic ic-twitter"></i><span class="hidden">Twitter</span>
					</a>
					<a class="facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://ohmybrew.com/building-a-simple-redis-autosuggest-with-ruby/" onclick="window.open(this.href, 'facebook-share','width=580,height=296');return false;">
						<i class="ic ic-facebook"></i><span class="hidden">Facebook</span>
					</a>
					<a class="googleplus" href="https://plus.google.com/share?url=https://ohmybrew.com/building-a-simple-redis-autosuggest-with-ruby/" onclick="window.open(this.href, 'google-plus-share', 'width=490,height=530');return false;">
						<i class="ic ic-googleplus"></i><span class="hidden">Google+</span>
					</a>
					<div class="clear"></div>
				</div>

				<aside class="post-tags">
					<a href="../tag/ruby/index.html">ruby</a> <a href="../tag/programming/index.html">programming</a> <a href="../tag/process/index.html">process</a>
				</aside>

				<div class="clear"></div>

				<aside class="post-author">
					<figure class="post-author-avatar avatar">
							<img src="http://www.gravatar.com/avatar/b866d161c9f02b7384a0940cb07135bc?s=250&amp;d=mm&amp;r=x" alt="Tyler King" />
					</figure>
					<div class="post-author-bio">
						<h4 class="post-author-name"><a href="../author/tyler-king/index.html">Tyler King</a></h4>
							<p class="post-author-about">I'm a loving father, passionate homebrewer, motorcycle rider, and of course.. a coder. I develop solutions through experience.</p>
							<span class="post-author-location"><i class="ic ic-location"></i> Newfoundland</span>
							<span class="post-author-website"><i class="ic ic-link"></i> <a href="https://ohmybrew.com">Website</a></span>
					</div>
					<div class="clear"></div>
				</aside>

			</section>


			<section class="post-comments">
				<a id="show-disqus" class="post-comments-activate">Show Comments</a>
			    <div id="disqus_thread"></div>
			</section>


			<aside class="post-nav">
					<a class="post-nav-next" href="../guts-now-with-multisite/index.html">
						<section class="post-nav-teaser">
							<i class="ic ic-arrow-left"></i>
							<h2 class="post-nav-title">Guts: With Multisite</h2>
							<p class="post-nav-excerpt">This is just a quick and proud update that I've released a&hellip;</p>
						</section>
					</a>
					<a class="post-nav-prev" href="../extending-a-rails-engine/index.html">
						<section class="post-nav-teaser">
							<i class="ic ic-arrow-right"></i>
							<h2 class="post-nav-title">Extending a Rails Engine</h2>
							<p class="post-nav-excerpt">Redesigning my CMS in Rails has been great fun. Theres been many&hellip;</p>
						</section>
					</a>
				<div class="clear"></div>
			</aside>


		</div>
	</article>
</main>


		<div id="body-class" style="display: none;" class="post-template tag-ruby tag-programming tag-process"></div>
	
		<footer id="footer">
			<div class="inner">
			</div>
		</footer>
	</section>

	<script type="text/javascript" src="../assets/js/script.js?v=4f8314772c"></script>

	
</body>
</html>
